/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AccordionEvent } from "./components/accordion/v-accordion-section/types";
import { Icon } from "./components/v-icon/type";
export { AccordionEvent } from "./components/accordion/v-accordion-section/types";
export { Icon } from "./components/v-icon/type";
export namespace Components {
    interface CookiePolicy {
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface VAccordion {
    }
    interface VAccordionSection {
        "headingLevel"?: number;
        "sectionTitle": string;
    }
    interface VButton {
        /**
          * The appearance of the button.
         */
        "appearance"?: (typeof this.ButtonAppearance)[keyof typeof this.ButtonAppearance];
        /**
          * Whether the button should have dense padding.
         */
        "dense"?: boolean;
        /**
          * Whether the button should be disabled.
         */
        "disabled"?: boolean;
        /**
          * Optional class(es) to pass to the button element.
         */
        "extraClassNames"?: string;
        /**
          * If this is set, the button will be rendered as a <a> tag with the link provided.
         */
        "href"?: string;
        /**
          * Whether the button should display inline.
         */
        "inline"?: boolean;
        /**
          * Whether the should display a loading spinner.
         */
        "isProcessing"?: boolean;
        /**
          * Icon to be displayed before the button text.
         */
        "prefixIcon"?: Icon;
        /**
          * Wether the button should be small.
         */
        "small"?: boolean;
        /**
          * Icon to be displayed after the button text.
         */
        "suffixIcon"?: Icon;
    }
    interface VIcon {
        /**
          * The name of the icon to display.
         */
        "icon": Icon;
        /**
          * The name of the icon to display.
         */
        "isLight"?: boolean;
        /**
          * The name of the icon to display.
         */
        "isRotating"?: boolean;
    }
    interface VSideNavigation {
    }
    interface VSideNavigationItem {
        "itemTitle": string;
        "link": string;
    }
    interface VSideNavigationSection {
        "sectionTitle": string;
    }
}
export interface VAccordionSectionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVAccordionSectionElement;
}
declare global {
    interface HTMLCookiePolicyElement extends Components.CookiePolicy, HTMLStencilElement {
    }
    var HTMLCookiePolicyElement: {
        prototype: HTMLCookiePolicyElement;
        new (): HTMLCookiePolicyElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLVAccordionElement extends Components.VAccordion, HTMLStencilElement {
    }
    var HTMLVAccordionElement: {
        prototype: HTMLVAccordionElement;
        new (): HTMLVAccordionElement;
    };
    interface HTMLVAccordionSectionElement extends Components.VAccordionSection, HTMLStencilElement {
    }
    var HTMLVAccordionSectionElement: {
        prototype: HTMLVAccordionSectionElement;
        new (): HTMLVAccordionSectionElement;
    };
    interface HTMLVButtonElement extends Components.VButton, HTMLStencilElement {
    }
    var HTMLVButtonElement: {
        prototype: HTMLVButtonElement;
        new (): HTMLVButtonElement;
    };
    interface HTMLVIconElement extends Components.VIcon, HTMLStencilElement {
    }
    var HTMLVIconElement: {
        prototype: HTMLVIconElement;
        new (): HTMLVIconElement;
    };
    interface HTMLVSideNavigationElement extends Components.VSideNavigation, HTMLStencilElement {
    }
    var HTMLVSideNavigationElement: {
        prototype: HTMLVSideNavigationElement;
        new (): HTMLVSideNavigationElement;
    };
    interface HTMLVSideNavigationItemElement extends Components.VSideNavigationItem, HTMLStencilElement {
    }
    var HTMLVSideNavigationItemElement: {
        prototype: HTMLVSideNavigationItemElement;
        new (): HTMLVSideNavigationItemElement;
    };
    interface HTMLVSideNavigationSectionElement extends Components.VSideNavigationSection, HTMLStencilElement {
    }
    var HTMLVSideNavigationSectionElement: {
        prototype: HTMLVSideNavigationSectionElement;
        new (): HTMLVSideNavigationSectionElement;
    };
    interface HTMLElementTagNameMap {
        "cookie-policy": HTMLCookiePolicyElement;
        "my-component": HTMLMyComponentElement;
        "v-accordion": HTMLVAccordionElement;
        "v-accordion-section": HTMLVAccordionSectionElement;
        "v-button": HTMLVButtonElement;
        "v-icon": HTMLVIconElement;
        "v-side-navigation": HTMLVSideNavigationElement;
        "v-side-navigation-item": HTMLVSideNavigationItemElement;
        "v-side-navigation-section": HTMLVSideNavigationSectionElement;
    }
}
declare namespace LocalJSX {
    interface CookiePolicy {
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface VAccordion {
    }
    interface VAccordionSection {
        "headingLevel"?: number;
        "onToggle"?: (event: VAccordionSectionCustomEvent<AccordionEvent>) => void;
        "sectionTitle"?: string;
    }
    interface VButton {
        /**
          * The appearance of the button.
         */
        "appearance"?: (typeof this.ButtonAppearance)[keyof typeof this.ButtonAppearance];
        /**
          * Whether the button should have dense padding.
         */
        "dense"?: boolean;
        /**
          * Whether the button should be disabled.
         */
        "disabled"?: boolean;
        /**
          * Optional class(es) to pass to the button element.
         */
        "extraClassNames"?: string;
        /**
          * If this is set, the button will be rendered as a <a> tag with the link provided.
         */
        "href"?: string;
        /**
          * Whether the button should display inline.
         */
        "inline"?: boolean;
        /**
          * Whether the should display a loading spinner.
         */
        "isProcessing"?: boolean;
        /**
          * Icon to be displayed before the button text.
         */
        "prefixIcon"?: Icon;
        /**
          * Wether the button should be small.
         */
        "small"?: boolean;
        /**
          * Icon to be displayed after the button text.
         */
        "suffixIcon"?: Icon;
    }
    interface VIcon {
        /**
          * The name of the icon to display.
         */
        "icon"?: Icon;
        /**
          * The name of the icon to display.
         */
        "isLight"?: boolean;
        /**
          * The name of the icon to display.
         */
        "isRotating"?: boolean;
    }
    interface VSideNavigation {
    }
    interface VSideNavigationItem {
        "itemTitle"?: string;
        "link"?: string;
    }
    interface VSideNavigationSection {
        "sectionTitle"?: string;
    }
    interface IntrinsicElements {
        "cookie-policy": CookiePolicy;
        "my-component": MyComponent;
        "v-accordion": VAccordion;
        "v-accordion-section": VAccordionSection;
        "v-button": VButton;
        "v-icon": VIcon;
        "v-side-navigation": VSideNavigation;
        "v-side-navigation-item": VSideNavigationItem;
        "v-side-navigation-section": VSideNavigationSection;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "cookie-policy": LocalJSX.CookiePolicy & JSXBase.HTMLAttributes<HTMLCookiePolicyElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "v-accordion": LocalJSX.VAccordion & JSXBase.HTMLAttributes<HTMLVAccordionElement>;
            "v-accordion-section": LocalJSX.VAccordionSection & JSXBase.HTMLAttributes<HTMLVAccordionSectionElement>;
            "v-button": LocalJSX.VButton & JSXBase.HTMLAttributes<HTMLVButtonElement>;
            "v-icon": LocalJSX.VIcon & JSXBase.HTMLAttributes<HTMLVIconElement>;
            "v-side-navigation": LocalJSX.VSideNavigation & JSXBase.HTMLAttributes<HTMLVSideNavigationElement>;
            "v-side-navigation-item": LocalJSX.VSideNavigationItem & JSXBase.HTMLAttributes<HTMLVSideNavigationItemElement>;
            "v-side-navigation-section": LocalJSX.VSideNavigationSection & JSXBase.HTMLAttributes<HTMLVSideNavigationSectionElement>;
        }
    }
}
